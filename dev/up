# This script:
# 1. Creates and activates a virtual environment
# 2. Installs dev requirements (only if requirements have changed)
#
# Usage: 
#   source dev/up

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "This script should be sourced, not executed directly."
  exit 1
fi

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NORMAL='\033[0m'

PROJECT_ROOT="$(cd -- "$(dirname "${BASH_SOURCE[0]}")/.." >/dev/null 2>&1 ; pwd -P)"
VENV_PATH="$PROJECT_ROOT/.venv"
DEV_REQUIREMENTS="$PROJECT_ROOT/dev/requirements.txt"
REQUIREMENTS="$PROJECT_ROOT/requirements.txt"
REQUIREMENTS_HASH_FILE="$PROJECT_ROOT/.requirements_hash"

is_true() {
  case "${1,,}" in
    1|on|yes|y|true|t) return 0 ;;
    *) return 1 ;;
  esac
}

print_step() {
  echo -e "${BLUE}🔧 $1${NORMAL}"
}

print_success() {
  echo -e "${GREEN}✅ $1${NORMAL}"
}

print_error() {
  echo -e "${RED}❌ $1${NORMAL}"
}

print_warning() {
  echo -e "${YELLOW}⚠️  $1${NORMAL}"
}

print_info() {
  echo -e "${BLUE}ℹ️  $1${NORMAL}"
}

calculate_requirements_hash() {
  local hash_input=""
  
  # Combine content of both requirements files
  if [ -f "$REQUIREMENTS" ]; then
    hash_input+="$(cat "$REQUIREMENTS")"
  fi
  
  if [ -f "$DEV_REQUIREMENTS" ]; then
    hash_input+="$(cat "$DEV_REQUIREMENTS")"
  fi
  
  # Calculate SHA256 hash of combined content
  echo -n "$hash_input" | sha256sum | cut -d' ' -f1
}

requirements_changed() {
  local current_hash=$(calculate_requirements_hash)
  local stored_hash=""

  if [ -f "$REQUIREMENTS_HASH_FILE" ]; then
    stored_hash=$(cat "$REQUIREMENTS_HASH_FILE" 2>/dev/null)
  fi
  
  if [ -z "$stored_hash" ]; then
    print_info "No previous requirements hash found"
    return 0  # First time, need to install
  fi
  
  if [ "$current_hash" != "$stored_hash" ]; then
    print_info "Requirements have changed (hash mismatch)"
    return 0  # Changed, need to install
  fi
  
  print_success "Requirements unchanged, skipping installation"
  return 1  # Unchanged, skip install
}

store_requirements_hash() {
  local current_hash=$(calculate_requirements_hash)
  
  rm -f "$REQUIREMENTS_HASH_FILE"
  echo "$current_hash" > "$REQUIREMENTS_HASH_FILE"
  if [ $? -eq 0 ]; then
    print_success "Stored requirements hash: ${current_hash:0:12}..."
  else
    print_error "Failed to store requirements hash"
    return 1
  fi
}

activate_venv() {
  print_step "Activating virtual environment..."
  
  # Determine the correct activation script path based on OS
  if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
    # Windows (Git Bash/MSYS2)
    ACTIVATE_PATH="$VENV_PATH/Scripts/activate"
  else
    # Unix-like systems
    ACTIVATE_PATH="$VENV_PATH/bin/activate"
  fi
  
  if [ -f "$ACTIVATE_PATH" ]; then
    source "$ACTIVATE_PATH"
    if [ "$VIRTUAL_ENV" != "" ]; then
      print_success "Virtual environment activated in current terminal!"
    else
      print_warning "No virtual environment is active."
    fi
  else
    print_error "Activation script not found: $ACTIVATE_PATH"
    return 1
  fi
}

setup_venv() {
  print_step "Setting up Python virtual environment..."
  
  if [ -d "$VENV_PATH" ]; then
    print_success "Virtual environment already exists at: $VENV_PATH"
  else
    print_step "Creating virtual environment at: $VENV_PATH"
    python -m venv "$VENV_PATH"
    if [ $? -eq 0 ]; then
      print_success "Virtual environment created successfully!"
    else
      print_error "Failed to create virtual environment"
      return 1
    fi
  fi
  
  if requirements_changed; then
    install_requirements
    store_requirements_hash
  fi
}

install_requirements() {
  print_step "Installing/updating requirements..."
  
  # Determine the correct pip path based on OS
  if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
    # Windows (Git Bash/MSYS2)
    PIP_PATH="$VENV_PATH/Scripts/pip.exe"
  else
    # Unix-like systems
    PIP_PATH="$VENV_PATH/bin/pip"
  fi
  
  if [ -f "$REQUIREMENTS" ]; then
    print_step "Installing base requirements from: $REQUIREMENTS"
    "$PIP_PATH" install -r "$REQUIREMENTS"
    if [ $? -ne 0 ]; then
      print_error "Failed to install base requirements"
      return 1
    fi
  fi
  
  if [ -f "$DEV_REQUIREMENTS" ]; then
    print_step "Installing dev requirements from: $DEV_REQUIREMENTS"
    "$PIP_PATH" install -r "$DEV_REQUIREMENTS"
    if [ $? -eq 0 ]; then
      print_success "Requirements installed successfully!"
    else
      print_error "Failed to install dev requirements"
      return 1
    fi
  else
    print_warning "Dev requirements file not found: $DEV_REQUIREMENTS"
  fi
}


main() {
  echo "🚀 Setting up development environment..."
  echo "========================================"
  setup_venv
  activate_venv
}

if is_true "$VERBOSE"; then
  print_info "VERBOSE mode enabled"
fi
main
